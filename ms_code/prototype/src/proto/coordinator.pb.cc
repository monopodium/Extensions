// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator.proto

#include "coordinator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeId_coordinator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StripeLocation_coordinator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_column_coordinator_2eproto;
namespace coordinator {
class SetPlacementCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPlacementCommand> _instance;
} _SetPlacementCommand_default_instance_;
class RequestResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestResult> _instance;
} _RequestResult_default_instance_;
class StripeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeInfo> _instance;
} _StripeInfo_default_instance_;
class StripeIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeId> _instance;
} _StripeId_default_instance_;
class columnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<column> _instance;
} _column_default_instance_;
class StripeLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeLocation> _instance;
} _StripeLocation_default_instance_;
class StripeDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeDetail> _instance;
} _StripeDetail_default_instance_;
}  // namespace coordinator
static void InitDefaultsscc_info_RequestResult_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_RequestResult_default_instance_;
    new (ptr) ::coordinator::RequestResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::RequestResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestResult_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestResult_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_SetPlacementCommand_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_SetPlacementCommand_default_instance_;
    new (ptr) ::coordinator::SetPlacementCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::SetPlacementCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPlacementCommand_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetPlacementCommand_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_StripeDetail_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeDetail_default_instance_;
    new (ptr) ::coordinator::StripeDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StripeDetail_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StripeDetail_coordinator_2eproto}, {
      &scc_info_StripeLocation_coordinator_2eproto.base,
      &scc_info_StripeId_coordinator_2eproto.base,}};

static void InitDefaultsscc_info_StripeId_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeId_default_instance_;
    new (ptr) ::coordinator::StripeId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeId_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeId_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_StripeInfo_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeInfo_default_instance_;
    new (ptr) ::coordinator::StripeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeInfo_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeInfo_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_StripeLocation_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeLocation_default_instance_;
    new (ptr) ::coordinator::StripeLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StripeLocation_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StripeLocation_coordinator_2eproto}, {
      &scc_info_column_coordinator_2eproto.base,}};

static void InitDefaultsscc_info_column_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_column_default_instance_;
    new (ptr) ::coordinator::column();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::column::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_column_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_column_coordinator_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_coordinator_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_coordinator_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_coordinator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_coordinator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::SetPlacementCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::SetPlacementCommand, place_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::RequestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::RequestResult, trueorfalse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripeid_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripe_r_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripe_c_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, blksize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeId, stripeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::column, dataloc_),
  PROTOBUF_FIELD_OFFSET(::coordinator::column, last_c_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, columnsloc_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, last_r_g_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeDetail, stripelocation_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeDetail, stripeid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::coordinator::SetPlacementCommand)},
  { 6, -1, sizeof(::coordinator::RequestResult)},
  { 12, -1, sizeof(::coordinator::StripeInfo)},
  { 21, -1, sizeof(::coordinator::StripeId)},
  { 27, -1, sizeof(::coordinator::column)},
  { 34, -1, sizeof(::coordinator::StripeLocation)},
  { 41, -1, sizeof(::coordinator::StripeDetail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_SetPlacementCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_RequestResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeDetail_default_instance_),
};

const char descriptor_table_protodef_coordinator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021coordinator.proto\022\013coordinator\"s\n\023SetP"
  "lacementCommand\0225\n\005place\030\001 \001(\0162&.coordin"
  "ator.SetPlacementCommand.PLACE\"%\n\005PLACE\022"
  "\n\n\006RANDOM\020\000\022\007\n\003DIS\020\001\022\007\n\003AGG\020\002\"$\n\rRequest"
  "Result\022\023\n\013trueorfalse\030\001 \001(\010\"S\n\nStripeInf"
  "o\022\020\n\010stripeid\030\001 \001(\005\022\020\n\010stripe_r\030\002 \001(\005\022\020\n"
  "\010stripe_c\030\003 \001(\005\022\017\n\007blksize\030\004 \001(\005\"\034\n\010Stri"
  "peId\022\020\n\010stripeid\030\001 \001(\005\")\n\006column\022\017\n\007data"
  "loc\030\001 \003(\t\022\016\n\006last_c\030\002 \001(\t\"`\n\016StripeLocat"
  "ion\022\'\n\ncolumnsloc\030\001 \003(\0132\023.coordinator.co"
  "lumn\022%\n\010last_r_g\030\002 \001(\0132\023.coordinator.col"
  "umn\"l\n\014StripeDetail\0223\n\016stripelocation\030\001 "
  "\001(\0132\033.coordinator.StripeLocation\022\'\n\010stri"
  "peid\030\002 \001(\0132\025.coordinator.StripeId2\254\001\n\022Co"
  "ordinatorService\022R\n\022setplacementpolicy\022 "
  ".coordinator.SetPlacementCommand\032\032.coord"
  "inator.RequestResult\022B\n\014uploadStripe\022\027.c"
  "oordinator.StripeInfo\032\031.coordinator.Stri"
  "peDetail2\016\n\014FromDataNodeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_coordinator_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_coordinator_2eproto_sccs[7] = {
  &scc_info_RequestResult_coordinator_2eproto.base,
  &scc_info_SetPlacementCommand_coordinator_2eproto.base,
  &scc_info_StripeDetail_coordinator_2eproto.base,
  &scc_info_StripeId_coordinator_2eproto.base,
  &scc_info_StripeInfo_coordinator_2eproto.base,
  &scc_info_StripeLocation_coordinator_2eproto.base,
  &scc_info_column_coordinator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_coordinator_2eproto_once;
static bool descriptor_table_coordinator_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coordinator_2eproto = {
  &descriptor_table_coordinator_2eproto_initialized, descriptor_table_protodef_coordinator_2eproto, "coordinator.proto", 752,
  &descriptor_table_coordinator_2eproto_once, descriptor_table_coordinator_2eproto_sccs, descriptor_table_coordinator_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_coordinator_2eproto::offsets,
  file_level_metadata_coordinator_2eproto, 7, file_level_enum_descriptors_coordinator_2eproto, file_level_service_descriptors_coordinator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_coordinator_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_coordinator_2eproto), true);
namespace coordinator {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetPlacementCommand_PLACE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_coordinator_2eproto);
  return file_level_enum_descriptors_coordinator_2eproto[0];
}
bool SetPlacementCommand_PLACE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetPlacementCommand_PLACE SetPlacementCommand::RANDOM;
constexpr SetPlacementCommand_PLACE SetPlacementCommand::DIS;
constexpr SetPlacementCommand_PLACE SetPlacementCommand::AGG;
constexpr SetPlacementCommand_PLACE SetPlacementCommand::PLACE_MIN;
constexpr SetPlacementCommand_PLACE SetPlacementCommand::PLACE_MAX;
constexpr int SetPlacementCommand::PLACE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SetPlacementCommand::InitAsDefaultInstance() {
}
class SetPlacementCommand::_Internal {
 public:
};

SetPlacementCommand::SetPlacementCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.SetPlacementCommand)
}
SetPlacementCommand::SetPlacementCommand(const SetPlacementCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  place_ = from.place_;
  // @@protoc_insertion_point(copy_constructor:coordinator.SetPlacementCommand)
}

void SetPlacementCommand::SharedCtor() {
  place_ = 0;
}

SetPlacementCommand::~SetPlacementCommand() {
  // @@protoc_insertion_point(destructor:coordinator.SetPlacementCommand)
  SharedDtor();
}

void SetPlacementCommand::SharedDtor() {
}

void SetPlacementCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPlacementCommand& SetPlacementCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPlacementCommand_coordinator_2eproto.base);
  return *internal_default_instance();
}


void SetPlacementCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.SetPlacementCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  place_ = 0;
  _internal_metadata_.Clear();
}

const char* SetPlacementCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .coordinator.SetPlacementCommand.PLACE place = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_place(static_cast<::coordinator::SetPlacementCommand_PLACE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPlacementCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.SetPlacementCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .coordinator.SetPlacementCommand.PLACE place = 1;
  if (this->place() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_place(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.SetPlacementCommand)
  return target;
}

size_t SetPlacementCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.SetPlacementCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .coordinator.SetPlacementCommand.PLACE place = 1;
  if (this->place() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_place());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPlacementCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.SetPlacementCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPlacementCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPlacementCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.SetPlacementCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.SetPlacementCommand)
    MergeFrom(*source);
  }
}

void SetPlacementCommand::MergeFrom(const SetPlacementCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.SetPlacementCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.place() != 0) {
    _internal_set_place(from._internal_place());
  }
}

void SetPlacementCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.SetPlacementCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlacementCommand::CopyFrom(const SetPlacementCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.SetPlacementCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlacementCommand::IsInitialized() const {
  return true;
}

void SetPlacementCommand::InternalSwap(SetPlacementCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(place_, other->place_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPlacementCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestResult::InitAsDefaultInstance() {
}
class RequestResult::_Internal {
 public:
};

RequestResult::RequestResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.RequestResult)
}
RequestResult::RequestResult(const RequestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trueorfalse_ = from.trueorfalse_;
  // @@protoc_insertion_point(copy_constructor:coordinator.RequestResult)
}

void RequestResult::SharedCtor() {
  trueorfalse_ = false;
}

RequestResult::~RequestResult() {
  // @@protoc_insertion_point(destructor:coordinator.RequestResult)
  SharedDtor();
}

void RequestResult::SharedDtor() {
}

void RequestResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestResult& RequestResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestResult_coordinator_2eproto.base);
  return *internal_default_instance();
}


void RequestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.RequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trueorfalse_ = false;
  _internal_metadata_.Clear();
}

const char* RequestResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool trueorfalse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trueorfalse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.RequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool trueorfalse = 1;
  if (this->trueorfalse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_trueorfalse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.RequestResult)
  return target;
}

size_t RequestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.RequestResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool trueorfalse = 1;
  if (this->trueorfalse() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.RequestResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.RequestResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.RequestResult)
    MergeFrom(*source);
  }
}

void RequestResult::MergeFrom(const RequestResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.RequestResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trueorfalse() != 0) {
    _internal_set_trueorfalse(from._internal_trueorfalse());
  }
}

void RequestResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.RequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResult::CopyFrom(const RequestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.RequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResult::IsInitialized() const {
  return true;
}

void RequestResult::InternalSwap(RequestResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trueorfalse_, other->trueorfalse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeInfo::InitAsDefaultInstance() {
}
class StripeInfo::_Internal {
 public:
};

StripeInfo::StripeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeInfo)
}
StripeInfo::StripeInfo(const StripeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stripeid_, &from.stripeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&blksize_) -
    reinterpret_cast<char*>(&stripeid_)) + sizeof(blksize_));
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeInfo)
}

void StripeInfo::SharedCtor() {
  ::memset(&stripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blksize_) -
      reinterpret_cast<char*>(&stripeid_)) + sizeof(blksize_));
}

StripeInfo::~StripeInfo() {
  // @@protoc_insertion_point(destructor:coordinator.StripeInfo)
  SharedDtor();
}

void StripeInfo::SharedDtor() {
}

void StripeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeInfo& StripeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeInfo_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blksize_) -
      reinterpret_cast<char*>(&stripeid_)) + sizeof(blksize_));
  _internal_metadata_.Clear();
}

const char* StripeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stripeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stripe_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stripe_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blksize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          blksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stripeid(), target);
  }

  // int32 stripe_r = 2;
  if (this->stripe_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stripe_r(), target);
  }

  // int32 stripe_c = 3;
  if (this->stripe_c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_stripe_c(), target);
  }

  // int32 blksize = 4;
  if (this->blksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_blksize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeInfo)
  return target;
}

size_t StripeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripeid());
  }

  // int32 stripe_r = 2;
  if (this->stripe_r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_r());
  }

  // int32 stripe_c = 3;
  if (this->stripe_c() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_c());
  }

  // int32 blksize = 4;
  if (this->blksize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blksize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeInfo)
    MergeFrom(*source);
  }
}

void StripeInfo::MergeFrom(const StripeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stripeid() != 0) {
    _internal_set_stripeid(from._internal_stripeid());
  }
  if (from.stripe_r() != 0) {
    _internal_set_stripe_r(from._internal_stripe_r());
  }
  if (from.stripe_c() != 0) {
    _internal_set_stripe_c(from._internal_stripe_c());
  }
  if (from.blksize() != 0) {
    _internal_set_blksize(from._internal_blksize());
  }
}

void StripeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeInfo::CopyFrom(const StripeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeInfo::IsInitialized() const {
  return true;
}

void StripeInfo::InternalSwap(StripeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripeid_, other->stripeid_);
  swap(stripe_r_, other->stripe_r_);
  swap(stripe_c_, other->stripe_c_);
  swap(blksize_, other->blksize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeId::InitAsDefaultInstance() {
}
class StripeId::_Internal {
 public:
};

StripeId::StripeId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeId)
}
StripeId::StripeId(const StripeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stripeid_ = from.stripeid_;
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeId)
}

void StripeId::SharedCtor() {
  stripeid_ = 0;
}

StripeId::~StripeId() {
  // @@protoc_insertion_point(destructor:coordinator.StripeId)
  SharedDtor();
}

void StripeId::SharedDtor() {
}

void StripeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeId& StripeId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeId_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeId::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stripeid_ = 0;
  _internal_metadata_.Clear();
}

const char* StripeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stripeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stripeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeId)
  return target;
}

size_t StripeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeId)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeId)
    MergeFrom(*source);
  }
}

void StripeId::MergeFrom(const StripeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stripeid() != 0) {
    _internal_set_stripeid(from._internal_stripeid());
  }
}

void StripeId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeId::CopyFrom(const StripeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeId::IsInitialized() const {
  return true;
}

void StripeId::InternalSwap(StripeId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripeid_, other->stripeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void column::InitAsDefaultInstance() {
}
class column::_Internal {
 public:
};

column::column()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.column)
}
column::column(const column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dataloc_(from.dataloc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_c().empty()) {
    last_c_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_c_);
  }
  // @@protoc_insertion_point(copy_constructor:coordinator.column)
}

void column::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_column_coordinator_2eproto.base);
  last_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

column::~column() {
  // @@protoc_insertion_point(destructor:coordinator.column)
  SharedDtor();
}

void column::SharedDtor() {
  last_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const column& column::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_column_coordinator_2eproto.base);
  return *internal_default_instance();
}


void column::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataloc_.Clear();
  last_c_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string dataloc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataloc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.column.dataloc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string last_c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_last_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.column.last_c"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* column::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dataloc = 1;
  for (int i = 0, n = this->_internal_dataloc_size(); i < n; i++) {
    const auto& s = this->_internal_dataloc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.column.dataloc");
    target = stream->WriteString(1, s, target);
  }

  // string last_c = 2;
  if (this->last_c().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_c().data(), static_cast<int>(this->_internal_last_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.column.last_c");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.column)
  return target;
}

size_t column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.column)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataloc = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dataloc_.size());
  for (int i = 0, n = dataloc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dataloc_.Get(i));
  }

  // string last_c = 2;
  if (this->last_c().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_c());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void column::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.column)
  GOOGLE_DCHECK_NE(&from, this);
  const column* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<column>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.column)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.column)
    MergeFrom(*source);
  }
}

void column::MergeFrom(const column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dataloc_.MergeFrom(from.dataloc_);
  if (from.last_c().size() > 0) {

    last_c_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_c_);
  }
}

void column::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void column::CopyFrom(const column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool column::IsInitialized() const {
  return true;
}

void column::InternalSwap(column* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dataloc_.InternalSwap(&other->dataloc_);
  last_c_.Swap(&other->last_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata column::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeLocation::InitAsDefaultInstance() {
  ::coordinator::_StripeLocation_default_instance_._instance.get_mutable()->last_r_g_ = const_cast< ::coordinator::column*>(
      ::coordinator::column::internal_default_instance());
}
class StripeLocation::_Internal {
 public:
  static const ::coordinator::column& last_r_g(const StripeLocation* msg);
};

const ::coordinator::column&
StripeLocation::_Internal::last_r_g(const StripeLocation* msg) {
  return *msg->last_r_g_;
}
StripeLocation::StripeLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeLocation)
}
StripeLocation::StripeLocation(const StripeLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      columnsloc_(from.columnsloc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_last_r_g()) {
    last_r_g_ = new ::coordinator::column(*from.last_r_g_);
  } else {
    last_r_g_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeLocation)
}

void StripeLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StripeLocation_coordinator_2eproto.base);
  last_r_g_ = nullptr;
}

StripeLocation::~StripeLocation() {
  // @@protoc_insertion_point(destructor:coordinator.StripeLocation)
  SharedDtor();
}

void StripeLocation::SharedDtor() {
  if (this != internal_default_instance()) delete last_r_g_;
}

void StripeLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeLocation& StripeLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeLocation_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columnsloc_.Clear();
  if (GetArenaNoVirtual() == nullptr && last_r_g_ != nullptr) {
    delete last_r_g_;
  }
  last_r_g_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StripeLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .coordinator.column columnsloc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columnsloc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .coordinator.column last_r_g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_r_g(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .coordinator.column columnsloc = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columnsloc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_columnsloc(i), target, stream);
  }

  // .coordinator.column last_r_g = 2;
  if (this->has_last_r_g()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::last_r_g(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeLocation)
  return target;
}

size_t StripeLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .coordinator.column columnsloc = 1;
  total_size += 1UL * this->_internal_columnsloc_size();
  for (const auto& msg : this->columnsloc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .coordinator.column last_r_g = 2;
  if (this->has_last_r_g()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_r_g_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeLocation)
    MergeFrom(*source);
  }
}

void StripeLocation::MergeFrom(const StripeLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columnsloc_.MergeFrom(from.columnsloc_);
  if (from.has_last_r_g()) {
    _internal_mutable_last_r_g()->::coordinator::column::MergeFrom(from._internal_last_r_g());
  }
}

void StripeLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeLocation::CopyFrom(const StripeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeLocation::IsInitialized() const {
  return true;
}

void StripeLocation::InternalSwap(StripeLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  columnsloc_.InternalSwap(&other->columnsloc_);
  swap(last_r_g_, other->last_r_g_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeDetail::InitAsDefaultInstance() {
  ::coordinator::_StripeDetail_default_instance_._instance.get_mutable()->stripelocation_ = const_cast< ::coordinator::StripeLocation*>(
      ::coordinator::StripeLocation::internal_default_instance());
  ::coordinator::_StripeDetail_default_instance_._instance.get_mutable()->stripeid_ = const_cast< ::coordinator::StripeId*>(
      ::coordinator::StripeId::internal_default_instance());
}
class StripeDetail::_Internal {
 public:
  static const ::coordinator::StripeLocation& stripelocation(const StripeDetail* msg);
  static const ::coordinator::StripeId& stripeid(const StripeDetail* msg);
};

const ::coordinator::StripeLocation&
StripeDetail::_Internal::stripelocation(const StripeDetail* msg) {
  return *msg->stripelocation_;
}
const ::coordinator::StripeId&
StripeDetail::_Internal::stripeid(const StripeDetail* msg) {
  return *msg->stripeid_;
}
StripeDetail::StripeDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeDetail)
}
StripeDetail::StripeDetail(const StripeDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stripelocation()) {
    stripelocation_ = new ::coordinator::StripeLocation(*from.stripelocation_);
  } else {
    stripelocation_ = nullptr;
  }
  if (from._internal_has_stripeid()) {
    stripeid_ = new ::coordinator::StripeId(*from.stripeid_);
  } else {
    stripeid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeDetail)
}

void StripeDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StripeDetail_coordinator_2eproto.base);
  ::memset(&stripelocation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripeid_) -
      reinterpret_cast<char*>(&stripelocation_)) + sizeof(stripeid_));
}

StripeDetail::~StripeDetail() {
  // @@protoc_insertion_point(destructor:coordinator.StripeDetail)
  SharedDtor();
}

void StripeDetail::SharedDtor() {
  if (this != internal_default_instance()) delete stripelocation_;
  if (this != internal_default_instance()) delete stripeid_;
}

void StripeDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeDetail& StripeDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeDetail_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stripelocation_ != nullptr) {
    delete stripelocation_;
  }
  stripelocation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stripeid_ != nullptr) {
    delete stripeid_;
  }
  stripeid_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StripeDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .coordinator.StripeLocation stripelocation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stripelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .coordinator.StripeId stripeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stripeid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .coordinator.StripeLocation stripelocation = 1;
  if (this->has_stripelocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stripelocation(this), target, stream);
  }

  // .coordinator.StripeId stripeid = 2;
  if (this->has_stripeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stripeid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeDetail)
  return target;
}

size_t StripeDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .coordinator.StripeLocation stripelocation = 1;
  if (this->has_stripelocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stripelocation_);
  }

  // .coordinator.StripeId stripeid = 2;
  if (this->has_stripeid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stripeid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeDetail)
    MergeFrom(*source);
  }
}

void StripeDetail::MergeFrom(const StripeDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stripelocation()) {
    _internal_mutable_stripelocation()->::coordinator::StripeLocation::MergeFrom(from._internal_stripelocation());
  }
  if (from.has_stripeid()) {
    _internal_mutable_stripeid()->::coordinator::StripeId::MergeFrom(from._internal_stripeid());
  }
}

void StripeDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeDetail::CopyFrom(const StripeDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeDetail::IsInitialized() const {
  return true;
}

void StripeDetail::InternalSwap(StripeDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripelocation_, other->stripelocation_);
  swap(stripeid_, other->stripeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace coordinator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::coordinator::SetPlacementCommand* Arena::CreateMaybeMessage< ::coordinator::SetPlacementCommand >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::SetPlacementCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::RequestResult* Arena::CreateMaybeMessage< ::coordinator::RequestResult >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::RequestResult >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::StripeInfo* Arena::CreateMaybeMessage< ::coordinator::StripeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::StripeId* Arena::CreateMaybeMessage< ::coordinator::StripeId >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeId >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::column* Arena::CreateMaybeMessage< ::coordinator::column >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::column >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::StripeLocation* Arena::CreateMaybeMessage< ::coordinator::StripeLocation >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::StripeDetail* Arena::CreateMaybeMessage< ::coordinator::StripeDetail >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
