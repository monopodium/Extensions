// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_coordinator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coordinator_2eproto;
namespace coordinator {
class RequestResult;
class RequestResultDefaultTypeInternal;
extern RequestResultDefaultTypeInternal _RequestResult_default_instance_;
class SetPlacementCommand;
class SetPlacementCommandDefaultTypeInternal;
extern SetPlacementCommandDefaultTypeInternal _SetPlacementCommand_default_instance_;
class StripeDetail;
class StripeDetailDefaultTypeInternal;
extern StripeDetailDefaultTypeInternal _StripeDetail_default_instance_;
class StripeId;
class StripeIdDefaultTypeInternal;
extern StripeIdDefaultTypeInternal _StripeId_default_instance_;
class StripeInfo;
class StripeInfoDefaultTypeInternal;
extern StripeInfoDefaultTypeInternal _StripeInfo_default_instance_;
class StripeLocation;
class StripeLocationDefaultTypeInternal;
extern StripeLocationDefaultTypeInternal _StripeLocation_default_instance_;
class column;
class columnDefaultTypeInternal;
extern columnDefaultTypeInternal _column_default_instance_;
}  // namespace coordinator
PROTOBUF_NAMESPACE_OPEN
template<> ::coordinator::RequestResult* Arena::CreateMaybeMessage<::coordinator::RequestResult>(Arena*);
template<> ::coordinator::SetPlacementCommand* Arena::CreateMaybeMessage<::coordinator::SetPlacementCommand>(Arena*);
template<> ::coordinator::StripeDetail* Arena::CreateMaybeMessage<::coordinator::StripeDetail>(Arena*);
template<> ::coordinator::StripeId* Arena::CreateMaybeMessage<::coordinator::StripeId>(Arena*);
template<> ::coordinator::StripeInfo* Arena::CreateMaybeMessage<::coordinator::StripeInfo>(Arena*);
template<> ::coordinator::StripeLocation* Arena::CreateMaybeMessage<::coordinator::StripeLocation>(Arena*);
template<> ::coordinator::column* Arena::CreateMaybeMessage<::coordinator::column>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace coordinator {

enum SetPlacementCommand_PLACE : int {
  SetPlacementCommand_PLACE_RANDOM = 0,
  SetPlacementCommand_PLACE_DIS = 1,
  SetPlacementCommand_PLACE_AGG = 2,
  SetPlacementCommand_PLACE_SetPlacementCommand_PLACE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetPlacementCommand_PLACE_SetPlacementCommand_PLACE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetPlacementCommand_PLACE_IsValid(int value);
constexpr SetPlacementCommand_PLACE SetPlacementCommand_PLACE_PLACE_MIN = SetPlacementCommand_PLACE_RANDOM;
constexpr SetPlacementCommand_PLACE SetPlacementCommand_PLACE_PLACE_MAX = SetPlacementCommand_PLACE_AGG;
constexpr int SetPlacementCommand_PLACE_PLACE_ARRAYSIZE = SetPlacementCommand_PLACE_PLACE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetPlacementCommand_PLACE_descriptor();
template<typename T>
inline const std::string& SetPlacementCommand_PLACE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetPlacementCommand_PLACE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetPlacementCommand_PLACE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetPlacementCommand_PLACE_descriptor(), enum_t_value);
}
inline bool SetPlacementCommand_PLACE_Parse(
    const std::string& name, SetPlacementCommand_PLACE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetPlacementCommand_PLACE>(
    SetPlacementCommand_PLACE_descriptor(), name, value);
}
// ===================================================================

class SetPlacementCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.SetPlacementCommand) */ {
 public:
  SetPlacementCommand();
  virtual ~SetPlacementCommand();

  SetPlacementCommand(const SetPlacementCommand& from);
  SetPlacementCommand(SetPlacementCommand&& from) noexcept
    : SetPlacementCommand() {
    *this = ::std::move(from);
  }

  inline SetPlacementCommand& operator=(const SetPlacementCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPlacementCommand& operator=(SetPlacementCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPlacementCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPlacementCommand* internal_default_instance() {
    return reinterpret_cast<const SetPlacementCommand*>(
               &_SetPlacementCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetPlacementCommand& a, SetPlacementCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPlacementCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPlacementCommand* New() const final {
    return CreateMaybeMessage<SetPlacementCommand>(nullptr);
  }

  SetPlacementCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPlacementCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPlacementCommand& from);
  void MergeFrom(const SetPlacementCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPlacementCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.SetPlacementCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetPlacementCommand_PLACE PLACE;
  static constexpr PLACE RANDOM =
    SetPlacementCommand_PLACE_RANDOM;
  static constexpr PLACE DIS =
    SetPlacementCommand_PLACE_DIS;
  static constexpr PLACE AGG =
    SetPlacementCommand_PLACE_AGG;
  static inline bool PLACE_IsValid(int value) {
    return SetPlacementCommand_PLACE_IsValid(value);
  }
  static constexpr PLACE PLACE_MIN =
    SetPlacementCommand_PLACE_PLACE_MIN;
  static constexpr PLACE PLACE_MAX =
    SetPlacementCommand_PLACE_PLACE_MAX;
  static constexpr int PLACE_ARRAYSIZE =
    SetPlacementCommand_PLACE_PLACE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PLACE_descriptor() {
    return SetPlacementCommand_PLACE_descriptor();
  }
  template<typename T>
  static inline const std::string& PLACE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PLACE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PLACE_Name.");
    return SetPlacementCommand_PLACE_Name(enum_t_value);
  }
  static inline bool PLACE_Parse(const std::string& name,
      PLACE* value) {
    return SetPlacementCommand_PLACE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceFieldNumber = 1,
  };
  // .coordinator.SetPlacementCommand.PLACE place = 1;
  void clear_place();
  ::coordinator::SetPlacementCommand_PLACE place() const;
  void set_place(::coordinator::SetPlacementCommand_PLACE value);
  private:
  ::coordinator::SetPlacementCommand_PLACE _internal_place() const;
  void _internal_set_place(::coordinator::SetPlacementCommand_PLACE value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator.SetPlacementCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int place_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RequestResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.RequestResult) */ {
 public:
  RequestResult();
  virtual ~RequestResult();

  RequestResult(const RequestResult& from);
  RequestResult(RequestResult&& from) noexcept
    : RequestResult() {
    *this = ::std::move(from);
  }

  inline RequestResult& operator=(const RequestResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestResult& operator=(RequestResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestResult* internal_default_instance() {
    return reinterpret_cast<const RequestResult*>(
               &_RequestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestResult& a, RequestResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestResult* New() const final {
    return CreateMaybeMessage<RequestResult>(nullptr);
  }

  RequestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestResult& from);
  void MergeFrom(const RequestResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.RequestResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrueorfalseFieldNumber = 1,
  };
  // bool trueorfalse = 1;
  void clear_trueorfalse();
  bool trueorfalse() const;
  void set_trueorfalse(bool value);
  private:
  bool _internal_trueorfalse() const;
  void _internal_set_trueorfalse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator.RequestResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool trueorfalse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class StripeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.StripeInfo) */ {
 public:
  StripeInfo();
  virtual ~StripeInfo();

  StripeInfo(const StripeInfo& from);
  StripeInfo(StripeInfo&& from) noexcept
    : StripeInfo() {
    *this = ::std::move(from);
  }

  inline StripeInfo& operator=(const StripeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeInfo& operator=(StripeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StripeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StripeInfo* internal_default_instance() {
    return reinterpret_cast<const StripeInfo*>(
               &_StripeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StripeInfo& a, StripeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StripeInfo* New() const final {
    return CreateMaybeMessage<StripeInfo>(nullptr);
  }

  StripeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StripeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StripeInfo& from);
  void MergeFrom(const StripeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.StripeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStripeidFieldNumber = 1,
    kStripeRFieldNumber = 2,
    kStripeCFieldNumber = 3,
    kBlksizeFieldNumber = 4,
  };
  // int32 stripeid = 1;
  void clear_stripeid();
  ::PROTOBUF_NAMESPACE_ID::int32 stripeid() const;
  void set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stripeid() const;
  void _internal_set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stripe_r = 2;
  void clear_stripe_r();
  ::PROTOBUF_NAMESPACE_ID::int32 stripe_r() const;
  void set_stripe_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stripe_r() const;
  void _internal_set_stripe_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stripe_c = 3;
  void clear_stripe_c();
  ::PROTOBUF_NAMESPACE_ID::int32 stripe_c() const;
  void set_stripe_c(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stripe_c() const;
  void _internal_set_stripe_c(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 blksize = 4;
  void clear_blksize();
  ::PROTOBUF_NAMESPACE_ID::int32 blksize() const;
  void set_blksize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blksize() const;
  void _internal_set_blksize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator.StripeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 stripeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 stripe_r_;
  ::PROTOBUF_NAMESPACE_ID::int32 stripe_c_;
  ::PROTOBUF_NAMESPACE_ID::int32 blksize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class StripeId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.StripeId) */ {
 public:
  StripeId();
  virtual ~StripeId();

  StripeId(const StripeId& from);
  StripeId(StripeId&& from) noexcept
    : StripeId() {
    *this = ::std::move(from);
  }

  inline StripeId& operator=(const StripeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeId& operator=(StripeId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StripeId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StripeId* internal_default_instance() {
    return reinterpret_cast<const StripeId*>(
               &_StripeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StripeId& a, StripeId& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StripeId* New() const final {
    return CreateMaybeMessage<StripeId>(nullptr);
  }

  StripeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StripeId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StripeId& from);
  void MergeFrom(const StripeId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.StripeId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStripeidFieldNumber = 1,
  };
  // int32 stripeid = 1;
  void clear_stripeid();
  ::PROTOBUF_NAMESPACE_ID::int32 stripeid() const;
  void set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stripeid() const;
  void _internal_set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator.StripeId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 stripeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class column :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.column) */ {
 public:
  column();
  virtual ~column();

  column(const column& from);
  column(column&& from) noexcept
    : column() {
    *this = ::std::move(from);
  }

  inline column& operator=(const column& from) {
    CopyFrom(from);
    return *this;
  }
  inline column& operator=(column&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const column& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const column* internal_default_instance() {
    return reinterpret_cast<const column*>(
               &_column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(column& a, column& b) {
    a.Swap(&b);
  }
  inline void Swap(column* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline column* New() const final {
    return CreateMaybeMessage<column>(nullptr);
  }

  column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const column& from);
  void MergeFrom(const column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.column";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataLocFieldNumber = 1,
    kLastCFieldNumber = 2,
  };
  // repeated string dataLoc = 1;
  int dataloc_size() const;
  private:
  int _internal_dataloc_size() const;
  public:
  void clear_dataloc();
  const std::string& dataloc(int index) const;
  std::string* mutable_dataloc(int index);
  void set_dataloc(int index, const std::string& value);
  void set_dataloc(int index, std::string&& value);
  void set_dataloc(int index, const char* value);
  void set_dataloc(int index, const char* value, size_t size);
  std::string* add_dataloc();
  void add_dataloc(const std::string& value);
  void add_dataloc(std::string&& value);
  void add_dataloc(const char* value);
  void add_dataloc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dataloc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dataloc();
  private:
  const std::string& _internal_dataloc(int index) const;
  std::string* _internal_add_dataloc();
  public:

  // string Last_c = 2;
  void clear_last_c();
  const std::string& last_c() const;
  void set_last_c(const std::string& value);
  void set_last_c(std::string&& value);
  void set_last_c(const char* value);
  void set_last_c(const char* value, size_t size);
  std::string* mutable_last_c();
  std::string* release_last_c();
  void set_allocated_last_c(std::string* last_c);
  private:
  const std::string& _internal_last_c() const;
  void _internal_set_last_c(const std::string& value);
  std::string* _internal_mutable_last_c();
  public:

  // @@protoc_insertion_point(class_scope:coordinator.column)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dataloc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class StripeLocation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.StripeLocation) */ {
 public:
  StripeLocation();
  virtual ~StripeLocation();

  StripeLocation(const StripeLocation& from);
  StripeLocation(StripeLocation&& from) noexcept
    : StripeLocation() {
    *this = ::std::move(from);
  }

  inline StripeLocation& operator=(const StripeLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeLocation& operator=(StripeLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StripeLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StripeLocation* internal_default_instance() {
    return reinterpret_cast<const StripeLocation*>(
               &_StripeLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StripeLocation& a, StripeLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeLocation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StripeLocation* New() const final {
    return CreateMaybeMessage<StripeLocation>(nullptr);
  }

  StripeLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StripeLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StripeLocation& from);
  void MergeFrom(const StripeLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.StripeLocation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsLocFieldNumber = 1,
    kLastRGFieldNumber = 2,
  };
  // repeated .coordinator.column columnsLoc = 1;
  int columnsloc_size() const;
  private:
  int _internal_columnsloc_size() const;
  public:
  void clear_columnsloc();
  ::coordinator::column* mutable_columnsloc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::coordinator::column >*
      mutable_columnsloc();
  private:
  const ::coordinator::column& _internal_columnsloc(int index) const;
  ::coordinator::column* _internal_add_columnsloc();
  public:
  const ::coordinator::column& columnsloc(int index) const;
  ::coordinator::column* add_columnsloc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::coordinator::column >&
      columnsloc() const;

  // .coordinator.column Last_R_G = 2;
  bool has_last_r_g() const;
  private:
  bool _internal_has_last_r_g() const;
  public:
  void clear_last_r_g();
  const ::coordinator::column& last_r_g() const;
  ::coordinator::column* release_last_r_g();
  ::coordinator::column* mutable_last_r_g();
  void set_allocated_last_r_g(::coordinator::column* last_r_g);
  private:
  const ::coordinator::column& _internal_last_r_g() const;
  ::coordinator::column* _internal_mutable_last_r_g();
  public:

  // @@protoc_insertion_point(class_scope:coordinator.StripeLocation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::coordinator::column > columnsloc_;
  ::coordinator::column* last_r_g_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class StripeDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator.StripeDetail) */ {
 public:
  StripeDetail();
  virtual ~StripeDetail();

  StripeDetail(const StripeDetail& from);
  StripeDetail(StripeDetail&& from) noexcept
    : StripeDetail() {
    *this = ::std::move(from);
  }

  inline StripeDetail& operator=(const StripeDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeDetail& operator=(StripeDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StripeDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StripeDetail* internal_default_instance() {
    return reinterpret_cast<const StripeDetail*>(
               &_StripeDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StripeDetail& a, StripeDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StripeDetail* New() const final {
    return CreateMaybeMessage<StripeDetail>(nullptr);
  }

  StripeDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StripeDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StripeDetail& from);
  void MergeFrom(const StripeDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator.StripeDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_coordinator_2eproto);
    return ::descriptor_table_coordinator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStripelocationFieldNumber = 1,
    kStripeidFieldNumber = 2,
  };
  // .coordinator.StripeLocation stripelocation = 1;
  bool has_stripelocation() const;
  private:
  bool _internal_has_stripelocation() const;
  public:
  void clear_stripelocation();
  const ::coordinator::StripeLocation& stripelocation() const;
  ::coordinator::StripeLocation* release_stripelocation();
  ::coordinator::StripeLocation* mutable_stripelocation();
  void set_allocated_stripelocation(::coordinator::StripeLocation* stripelocation);
  private:
  const ::coordinator::StripeLocation& _internal_stripelocation() const;
  ::coordinator::StripeLocation* _internal_mutable_stripelocation();
  public:

  // .coordinator.StripeId stripeid = 2;
  bool has_stripeid() const;
  private:
  bool _internal_has_stripeid() const;
  public:
  void clear_stripeid();
  const ::coordinator::StripeId& stripeid() const;
  ::coordinator::StripeId* release_stripeid();
  ::coordinator::StripeId* mutable_stripeid();
  void set_allocated_stripeid(::coordinator::StripeId* stripeid);
  private:
  const ::coordinator::StripeId& _internal_stripeid() const;
  ::coordinator::StripeId* _internal_mutable_stripeid();
  public:

  // @@protoc_insertion_point(class_scope:coordinator.StripeDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::coordinator::StripeLocation* stripelocation_;
  ::coordinator::StripeId* stripeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_coordinator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetPlacementCommand

// .coordinator.SetPlacementCommand.PLACE place = 1;
inline void SetPlacementCommand::clear_place() {
  place_ = 0;
}
inline ::coordinator::SetPlacementCommand_PLACE SetPlacementCommand::_internal_place() const {
  return static_cast< ::coordinator::SetPlacementCommand_PLACE >(place_);
}
inline ::coordinator::SetPlacementCommand_PLACE SetPlacementCommand::place() const {
  // @@protoc_insertion_point(field_get:coordinator.SetPlacementCommand.place)
  return _internal_place();
}
inline void SetPlacementCommand::_internal_set_place(::coordinator::SetPlacementCommand_PLACE value) {
  
  place_ = value;
}
inline void SetPlacementCommand::set_place(::coordinator::SetPlacementCommand_PLACE value) {
  _internal_set_place(value);
  // @@protoc_insertion_point(field_set:coordinator.SetPlacementCommand.place)
}

// -------------------------------------------------------------------

// RequestResult

// bool trueorfalse = 1;
inline void RequestResult::clear_trueorfalse() {
  trueorfalse_ = false;
}
inline bool RequestResult::_internal_trueorfalse() const {
  return trueorfalse_;
}
inline bool RequestResult::trueorfalse() const {
  // @@protoc_insertion_point(field_get:coordinator.RequestResult.trueorfalse)
  return _internal_trueorfalse();
}
inline void RequestResult::_internal_set_trueorfalse(bool value) {
  
  trueorfalse_ = value;
}
inline void RequestResult::set_trueorfalse(bool value) {
  _internal_set_trueorfalse(value);
  // @@protoc_insertion_point(field_set:coordinator.RequestResult.trueorfalse)
}

// -------------------------------------------------------------------

// StripeInfo

// int32 stripeid = 1;
inline void StripeInfo::clear_stripeid() {
  stripeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::_internal_stripeid() const {
  return stripeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::stripeid() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeInfo.stripeid)
  return _internal_stripeid();
}
inline void StripeInfo::_internal_set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stripeid_ = value;
}
inline void StripeInfo::set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stripeid(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeInfo.stripeid)
}

// int32 stripe_r = 2;
inline void StripeInfo::clear_stripe_r() {
  stripe_r_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::_internal_stripe_r() const {
  return stripe_r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::stripe_r() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeInfo.stripe_r)
  return _internal_stripe_r();
}
inline void StripeInfo::_internal_set_stripe_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stripe_r_ = value;
}
inline void StripeInfo::set_stripe_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stripe_r(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeInfo.stripe_r)
}

// int32 stripe_c = 3;
inline void StripeInfo::clear_stripe_c() {
  stripe_c_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::_internal_stripe_c() const {
  return stripe_c_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::stripe_c() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeInfo.stripe_c)
  return _internal_stripe_c();
}
inline void StripeInfo::_internal_set_stripe_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stripe_c_ = value;
}
inline void StripeInfo::set_stripe_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stripe_c(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeInfo.stripe_c)
}

// int32 blksize = 4;
inline void StripeInfo::clear_blksize() {
  blksize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::_internal_blksize() const {
  return blksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeInfo::blksize() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeInfo.blksize)
  return _internal_blksize();
}
inline void StripeInfo::_internal_set_blksize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blksize_ = value;
}
inline void StripeInfo::set_blksize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blksize(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeInfo.blksize)
}

// -------------------------------------------------------------------

// StripeId

// int32 stripeid = 1;
inline void StripeId::clear_stripeid() {
  stripeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeId::_internal_stripeid() const {
  return stripeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StripeId::stripeid() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeId.stripeid)
  return _internal_stripeid();
}
inline void StripeId::_internal_set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stripeid_ = value;
}
inline void StripeId::set_stripeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stripeid(value);
  // @@protoc_insertion_point(field_set:coordinator.StripeId.stripeid)
}

// -------------------------------------------------------------------

// column

// repeated string dataLoc = 1;
inline int column::_internal_dataloc_size() const {
  return dataloc_.size();
}
inline int column::dataloc_size() const {
  return _internal_dataloc_size();
}
inline void column::clear_dataloc() {
  dataloc_.Clear();
}
inline std::string* column::add_dataloc() {
  // @@protoc_insertion_point(field_add_mutable:coordinator.column.dataLoc)
  return _internal_add_dataloc();
}
inline const std::string& column::_internal_dataloc(int index) const {
  return dataloc_.Get(index);
}
inline const std::string& column::dataloc(int index) const {
  // @@protoc_insertion_point(field_get:coordinator.column.dataLoc)
  return _internal_dataloc(index);
}
inline std::string* column::mutable_dataloc(int index) {
  // @@protoc_insertion_point(field_mutable:coordinator.column.dataLoc)
  return dataloc_.Mutable(index);
}
inline void column::set_dataloc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:coordinator.column.dataLoc)
  dataloc_.Mutable(index)->assign(value);
}
inline void column::set_dataloc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:coordinator.column.dataLoc)
  dataloc_.Mutable(index)->assign(std::move(value));
}
inline void column::set_dataloc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dataloc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:coordinator.column.dataLoc)
}
inline void column::set_dataloc(int index, const char* value, size_t size) {
  dataloc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:coordinator.column.dataLoc)
}
inline std::string* column::_internal_add_dataloc() {
  return dataloc_.Add();
}
inline void column::add_dataloc(const std::string& value) {
  dataloc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:coordinator.column.dataLoc)
}
inline void column::add_dataloc(std::string&& value) {
  dataloc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:coordinator.column.dataLoc)
}
inline void column::add_dataloc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dataloc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:coordinator.column.dataLoc)
}
inline void column::add_dataloc(const char* value, size_t size) {
  dataloc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:coordinator.column.dataLoc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
column::dataloc() const {
  // @@protoc_insertion_point(field_list:coordinator.column.dataLoc)
  return dataloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
column::mutable_dataloc() {
  // @@protoc_insertion_point(field_mutable_list:coordinator.column.dataLoc)
  return &dataloc_;
}

// string Last_c = 2;
inline void column::clear_last_c() {
  last_c_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& column::last_c() const {
  // @@protoc_insertion_point(field_get:coordinator.column.Last_c)
  return _internal_last_c();
}
inline void column::set_last_c(const std::string& value) {
  _internal_set_last_c(value);
  // @@protoc_insertion_point(field_set:coordinator.column.Last_c)
}
inline std::string* column::mutable_last_c() {
  // @@protoc_insertion_point(field_mutable:coordinator.column.Last_c)
  return _internal_mutable_last_c();
}
inline const std::string& column::_internal_last_c() const {
  return last_c_.GetNoArena();
}
inline void column::_internal_set_last_c(const std::string& value) {
  
  last_c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void column::set_last_c(std::string&& value) {
  
  last_c_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:coordinator.column.Last_c)
}
inline void column::set_last_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:coordinator.column.Last_c)
}
inline void column::set_last_c(const char* value, size_t size) {
  
  last_c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:coordinator.column.Last_c)
}
inline std::string* column::_internal_mutable_last_c() {
  
  return last_c_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* column::release_last_c() {
  // @@protoc_insertion_point(field_release:coordinator.column.Last_c)
  
  return last_c_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void column::set_allocated_last_c(std::string* last_c) {
  if (last_c != nullptr) {
    
  } else {
    
  }
  last_c_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_c);
  // @@protoc_insertion_point(field_set_allocated:coordinator.column.Last_c)
}

// -------------------------------------------------------------------

// StripeLocation

// repeated .coordinator.column columnsLoc = 1;
inline int StripeLocation::_internal_columnsloc_size() const {
  return columnsloc_.size();
}
inline int StripeLocation::columnsloc_size() const {
  return _internal_columnsloc_size();
}
inline void StripeLocation::clear_columnsloc() {
  columnsloc_.Clear();
}
inline ::coordinator::column* StripeLocation::mutable_columnsloc(int index) {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeLocation.columnsLoc)
  return columnsloc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::coordinator::column >*
StripeLocation::mutable_columnsloc() {
  // @@protoc_insertion_point(field_mutable_list:coordinator.StripeLocation.columnsLoc)
  return &columnsloc_;
}
inline const ::coordinator::column& StripeLocation::_internal_columnsloc(int index) const {
  return columnsloc_.Get(index);
}
inline const ::coordinator::column& StripeLocation::columnsloc(int index) const {
  // @@protoc_insertion_point(field_get:coordinator.StripeLocation.columnsLoc)
  return _internal_columnsloc(index);
}
inline ::coordinator::column* StripeLocation::_internal_add_columnsloc() {
  return columnsloc_.Add();
}
inline ::coordinator::column* StripeLocation::add_columnsloc() {
  // @@protoc_insertion_point(field_add:coordinator.StripeLocation.columnsLoc)
  return _internal_add_columnsloc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::coordinator::column >&
StripeLocation::columnsloc() const {
  // @@protoc_insertion_point(field_list:coordinator.StripeLocation.columnsLoc)
  return columnsloc_;
}

// .coordinator.column Last_R_G = 2;
inline bool StripeLocation::_internal_has_last_r_g() const {
  return this != internal_default_instance() && last_r_g_ != nullptr;
}
inline bool StripeLocation::has_last_r_g() const {
  return _internal_has_last_r_g();
}
inline void StripeLocation::clear_last_r_g() {
  if (GetArenaNoVirtual() == nullptr && last_r_g_ != nullptr) {
    delete last_r_g_;
  }
  last_r_g_ = nullptr;
}
inline const ::coordinator::column& StripeLocation::_internal_last_r_g() const {
  const ::coordinator::column* p = last_r_g_;
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinator::column*>(
      &::coordinator::_column_default_instance_);
}
inline const ::coordinator::column& StripeLocation::last_r_g() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeLocation.Last_R_G)
  return _internal_last_r_g();
}
inline ::coordinator::column* StripeLocation::release_last_r_g() {
  // @@protoc_insertion_point(field_release:coordinator.StripeLocation.Last_R_G)
  
  ::coordinator::column* temp = last_r_g_;
  last_r_g_ = nullptr;
  return temp;
}
inline ::coordinator::column* StripeLocation::_internal_mutable_last_r_g() {
  
  if (last_r_g_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinator::column>(GetArenaNoVirtual());
    last_r_g_ = p;
  }
  return last_r_g_;
}
inline ::coordinator::column* StripeLocation::mutable_last_r_g() {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeLocation.Last_R_G)
  return _internal_mutable_last_r_g();
}
inline void StripeLocation::set_allocated_last_r_g(::coordinator::column* last_r_g) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete last_r_g_;
  }
  if (last_r_g) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_r_g = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_r_g, submessage_arena);
    }
    
  } else {
    
  }
  last_r_g_ = last_r_g;
  // @@protoc_insertion_point(field_set_allocated:coordinator.StripeLocation.Last_R_G)
}

// -------------------------------------------------------------------

// StripeDetail

// .coordinator.StripeLocation stripelocation = 1;
inline bool StripeDetail::_internal_has_stripelocation() const {
  return this != internal_default_instance() && stripelocation_ != nullptr;
}
inline bool StripeDetail::has_stripelocation() const {
  return _internal_has_stripelocation();
}
inline void StripeDetail::clear_stripelocation() {
  if (GetArenaNoVirtual() == nullptr && stripelocation_ != nullptr) {
    delete stripelocation_;
  }
  stripelocation_ = nullptr;
}
inline const ::coordinator::StripeLocation& StripeDetail::_internal_stripelocation() const {
  const ::coordinator::StripeLocation* p = stripelocation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinator::StripeLocation*>(
      &::coordinator::_StripeLocation_default_instance_);
}
inline const ::coordinator::StripeLocation& StripeDetail::stripelocation() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeDetail.stripelocation)
  return _internal_stripelocation();
}
inline ::coordinator::StripeLocation* StripeDetail::release_stripelocation() {
  // @@protoc_insertion_point(field_release:coordinator.StripeDetail.stripelocation)
  
  ::coordinator::StripeLocation* temp = stripelocation_;
  stripelocation_ = nullptr;
  return temp;
}
inline ::coordinator::StripeLocation* StripeDetail::_internal_mutable_stripelocation() {
  
  if (stripelocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinator::StripeLocation>(GetArenaNoVirtual());
    stripelocation_ = p;
  }
  return stripelocation_;
}
inline ::coordinator::StripeLocation* StripeDetail::mutable_stripelocation() {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeDetail.stripelocation)
  return _internal_mutable_stripelocation();
}
inline void StripeDetail::set_allocated_stripelocation(::coordinator::StripeLocation* stripelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stripelocation_;
  }
  if (stripelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stripelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stripelocation, submessage_arena);
    }
    
  } else {
    
  }
  stripelocation_ = stripelocation;
  // @@protoc_insertion_point(field_set_allocated:coordinator.StripeDetail.stripelocation)
}

// .coordinator.StripeId stripeid = 2;
inline bool StripeDetail::_internal_has_stripeid() const {
  return this != internal_default_instance() && stripeid_ != nullptr;
}
inline bool StripeDetail::has_stripeid() const {
  return _internal_has_stripeid();
}
inline void StripeDetail::clear_stripeid() {
  if (GetArenaNoVirtual() == nullptr && stripeid_ != nullptr) {
    delete stripeid_;
  }
  stripeid_ = nullptr;
}
inline const ::coordinator::StripeId& StripeDetail::_internal_stripeid() const {
  const ::coordinator::StripeId* p = stripeid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::coordinator::StripeId*>(
      &::coordinator::_StripeId_default_instance_);
}
inline const ::coordinator::StripeId& StripeDetail::stripeid() const {
  // @@protoc_insertion_point(field_get:coordinator.StripeDetail.stripeid)
  return _internal_stripeid();
}
inline ::coordinator::StripeId* StripeDetail::release_stripeid() {
  // @@protoc_insertion_point(field_release:coordinator.StripeDetail.stripeid)
  
  ::coordinator::StripeId* temp = stripeid_;
  stripeid_ = nullptr;
  return temp;
}
inline ::coordinator::StripeId* StripeDetail::_internal_mutable_stripeid() {
  
  if (stripeid_ == nullptr) {
    auto* p = CreateMaybeMessage<::coordinator::StripeId>(GetArenaNoVirtual());
    stripeid_ = p;
  }
  return stripeid_;
}
inline ::coordinator::StripeId* StripeDetail::mutable_stripeid() {
  // @@protoc_insertion_point(field_mutable:coordinator.StripeDetail.stripeid)
  return _internal_mutable_stripeid();
}
inline void StripeDetail::set_allocated_stripeid(::coordinator::StripeId* stripeid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stripeid_;
  }
  if (stripeid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stripeid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stripeid, submessage_arena);
    }
    
  } else {
    
  }
  stripeid_ = stripeid;
  // @@protoc_insertion_point(field_set_allocated:coordinator.StripeDetail.stripeid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coordinator

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::coordinator::SetPlacementCommand_PLACE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::coordinator::SetPlacementCommand_PLACE>() {
  return ::coordinator::SetPlacementCommand_PLACE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto
